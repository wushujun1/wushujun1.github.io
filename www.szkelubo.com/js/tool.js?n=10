var kernelId = (function (userAgent) { if (userAgent.indexOf("Trident") !== -1) { return 0; } else { if (userAgent.indexOf("WebKit") !== -1) { return 1; } else { if (userAgent.indexOf("Gecko") !== -1) { return 2; } else { if (userAgent.indexOf("Presto") !== -1) { return 3; } else { if (userAgent.indexOf("MSIE") !== -1) { return 0; } else { if (userAgent.indexOf("(KHTML, like Gecko)") !== -1) { return 1; } else { if (userAgent.indexOf("rv:") !== -1) { return 2; } else { if (userAgent.indexOf("Opera") !== -1) { return 3; } else { return 0; }; }; }; }; }; }; }; }; })(navigator.userAgent);
if (kernelId === 0) { var userAgent = navigator.userAgent; var userAgent2 = userAgent.substring(userAgent.indexOf("MSIE") + 5, userAgent.length); var userAgent3 = userAgent2.substring(0, userAgent2.indexOf(".")); if (Number(userAgent3) > 8) { kernelId = 1; }; };
if (kernelId === 0 && navigator.userAgent.indexOf("like Gecko") !== -1) { kernelId = 1; };
var _ = function (id) { return document.getElementById(id); };
var createElement = function (pn, n, exec) { var o = document.createElement(n); exec(o); pn.appendChild(o); return o; };
var addEvent, delEvent;
if (kernelId === 0 && navigator.userAgent.indexOf("like Gecko") === -1) { addEvent = function (obj, eName, handler) { obj.attachEvent("on" + eName, handler); }; delEvent = function (obj, eName, handler) { obj.detachEvent("on" + eName, handler); }; }
else { addEvent = function (obj, eName, handler) { obj.addEventListener(eName, handler, false); }; delEvent = function (obj, eName, handler) { obj.removeEventListener(eName, handler, false); }; };
var createCompatibleEvent;
if (kernelId === 0) {
    createCompatibleEvent = function (event) {
        if (event.type === "mousedown" || event.type === "mousemove" || event.type === "mouseup") {
            event.layerX = event.offsetX;
            event.layerY = event.offsetY;
            event.pageX = event.clientX;
            event.pageY = event.clientY;
        };
        event.getKeyCode = function () { return event.keyCode; };
        event.getButton = function () {
            var buttonCode;
            if (navigator.userAgent.indexOf("TencentTraveler") === -1) {
                switch (event.button) {
                    case 1: { buttonCode = 0; }; break;
                    case 4: { buttonCode = 1; }; break;
                    case 2: { buttonCode = 2; }; break;
                    default: { }; break;
                };
            } else {
                switch (event.button) {
                    case 1: { buttonCode = 0; }; break;
                    case 4: { buttonCode = 1; }; break;
                    case 0: { buttonCode = 2; }; break;
                    default: { }; break;
                };
            };
            return buttonCode;
        };
        event.target = event.srcElement;
        event.selectionEmpty = function () { document.selection.empty(); };
        event.preventDefault = function () { event.returnValue = false; };
        event.stopPropagation = function () { event.cancelBubble = true; };
        return event;
    };
} else {
    createCompatibleEvent = function (event) {
        event.getKeyCode = function () { return event.which; };
        event.getButton = function () { return event.button; };
        event.selectionEmpty = function () { getSelection().removeAllRanges(); };
        return event;
    };
};
var addpreventdefaultexec = function (obj, event, isdefault, exec) { var e = createCompatibleEvent(event); if (isdefault === false) { e.preventDefault(); e.returnValue = false; }; e.stopPropagation(); exec(obj, e); };
var addonload;
var addonblur;
var addonclick;
var addonfocus;
var addonkeyup;
var addonpaste;
var addonchange;
var addonresize;
var addonscroll;
var addonkeydown;
var addonmouseup;
var addonmouseout;
var addonkeypress;
var addonmouseover;
var addonmousedown;
var addonmousemove;
var addoncontextmenu;
if (kernelId === 0) {
    addonload = function (obj, isdefault, exec) { var func = function () { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "load", func); this.remove = function () { delEvent(obj, "load", func); }; };
    addonblur = function (obj, isdefault, exec) { var func = function () { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "blur", func); this.remove = function () { delEvent(obj, "blur", func); }; };
    addonclick = function (obj, isdefault, exec) { var func = function () { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "click", func); this.remove = function () { delEvent(obj, "click", func); }; };
    addonfocus = function (obj, isdefault, exec) { var func = function () { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "focus", func); this.remove = function () { delEvent(obj, "focus", func); }; };
    addonkeyup = function (obj, isdefault, exec) { var func = function () { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "keyup", func); this.remove = function () { delEvent(obj, "keyup", func); }; };
    addonpaste = function (obj, isdefault, exec) { var func = function () { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "paste", func); this.remove = function () { delEvent(obj, "paste", func); }; };
    addonchange = function (obj, isdefault, exec) { var func = function () { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "change", func); this.remove = function () { delEvent(obj, "change", func); }; };
    addonresize = function (obj, isdefault, exec) { var func = function () { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "resize", func); this.remove = function () { delEvent(obj, "resize", func); }; };
    addonscroll = function (obj, isdefault, exec) { var func = function () { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "scroll", func); this.remove = function () { delEvent(obj, "scroll", func); }; };
    addonkeydown = function (obj, isdefault, exec) { var func = function () { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "keydown", func); this.remove = function () { delEvent(obj, "keydown", func); }; };
    addonmouseup = function (obj, isdefault, exec) { var func = function () { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "mouseup", func); this.remove = function () { delEvent(obj, "mouseup", func); }; };
    addonmouseout = function (obj, isdefault, exec) { var func = function () { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "mouseout", func); this.remove = function () { delEvent(obj, "mouseout", func); }; };
    addonkeypress = function (obj, isdefault, exec) { var func = function () { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "keypress", func); this.remove = function () { delEvent(obj, "keypress", func); }; };
    addonmouseover = function (obj, isdefault, exec) { var func = function () { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "mouseover", func); this.remove = function () { delEvent(obj, "mouseover", func); }; };
    addonmousedown = function (obj, isdefault, exec) { var func = function () { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "mousedown", func); this.remove = function () { delEvent(obj, "mousedown", func); }; };
    addonmousemove = function (obj, isdefault, exec) { var func = function () { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "mousemove", func); this.remove = function () { delEvent(obj, "mousemove", func); }; };
    addoncontextmenu = function (obj, isdefault, exec) { var func = function () { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "contextmenu", func); this.remove = function () { delEvent(obj, "contextmenu", func); }; };
} else {
    addonload = function (obj, isdefault, exec) { var func = function (event) { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "load", func); this.remove = function () { delEvent(obj, "load", func); }; };
    addonblur = function (obj, isdefault, exec) { var func = function (event) { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "blur", func); this.remove = function () { delEvent(obj, "blur", func); }; };
    addonclick = function (obj, isdefault, exec) { var func = function (event) { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "click", func); this.remove = function () { delEvent(obj, "click", func); }; };
    addonfocus = function (obj, isdefault, exec) { var func = function (event) { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "focus", func); this.remove = function () { delEvent(obj, "focus", func); }; };
    addonkeyup = function (obj, isdefault, exec) { var func = function (event) { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "keyup", func); this.remove = function () { delEvent(obj, "keyup", func); }; };
    addonpaste = function (obj, isdefault, exec) { var func = function (event) { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "paste", func); this.remove = function () { delEvent(obj, "paste", func); }; };
    addonchange = function (obj, isdefault, exec) { var func = function (event) { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "change", func); this.remove = function () { delEvent(obj, "change", func); }; };
    addonresize = function (obj, isdefault, exec) { var func = function (event) { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "resize", func); this.remove = function () { delEvent(obj, "resize", func); }; };
    addonscroll = function (obj, isdefault, exec) { var func = function (event) { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "scroll", func); this.remove = function () { delEvent(obj, "scroll", func); }; };
    addonkeydown = function (obj, isdefault, exec) { var func = function (event) { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "keydown", func); this.remove = function () { delEvent(obj, "keydown", func); }; };
    addonmouseup = function (obj, isdefault, exec) { var func = function (event) { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "mouseup", func); this.remove = function () { delEvent(obj, "mouseup", func); }; };
    addonmouseout = function (obj, isdefault, exec) { var func = function (event) { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "mouseout", func); this.remove = function () { delEvent(obj, "mouseout", func); }; };
    addonkeypress = function (obj, isdefault, exec) { var func = function (event) { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "keypress", func); this.remove = function () { delEvent(obj, "keypress", func); }; };
    addonmouseover = function (obj, isdefault, exec) { var func = function (event) { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "mouseover", func); this.remove = function () { delEvent(obj, "mouseover", func); }; };
    addonmousedown = function (obj, isdefault, exec) { var func = function (event) { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "mousedown", func); this.remove = function () { delEvent(obj, "mousedown", func); }; };
    addonmousemove = function (obj, isdefault, exec) { var func = function (event) { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "mousemove", func); this.remove = function () { delEvent(obj, "mousemove", func); }; };
    addoncontextmenu = function (obj, isdefault, exec) { var func = function (event) { addpreventdefaultexec(obj, event, isdefault, exec); }; addEvent(obj, "contextmenu", func); this.remove = function () { delEvent(obj, "contextmenu", func); }; };
};
function contains(arr, obj) { var i = arr.length, isok = false; while (i--) { if (arr[i] === obj) { isok = true; break; }; }; return isok; };
var setScrollTop = function (st) { document.documentElement.scrollTop = document.body.scrollTop = st; };
var getScrollTop = function () { return document.documentElement.scrollTop || document.body.scrollTop; };
var getStyle;
if (kernelId === 0) { getStyle = function (o, attr) { return o.currentStyle[attr]; }; }
else { getStyle = function (o, attr) { return getComputedStyle(o, null)[attr]; }; };
var hasClass = function (obj, cls) { var arr = obj.className.split(" "); return contains(arr, cls); };
var addClass = function (obj, cls) { if (hasClass(obj, cls) === false) { obj.className += " " + cls; }; };
var removeClass = function (obj, cls) { if (hasClass(obj, cls) === true) { obj.className = obj.className.replace(new RegExp("^\\s*" + cls + "$"), ""); }; };
var toggleClass = function (obj, cls) { if (hasClass(obj, cls) === true) { removeClass(obj, cls); } else { addClass(obj, cls); }; };
var getElementsByClass = function (cn) { var objs = new Array(); var tags = document.getElementsByTagName("*"); for (var i = 0; i < tags.length; i++) { var t = tags[i]; if (t.nodeType == 1 && hasClass(t, cn) === true) { objs.push(tags[i]); }; }; return objs; };
var getOpacity;
if (kernelId !== 0) { getOpacity = function (obj) { return Number(getStyle(obj, "opacity")); }; }
else { getOpacity = function (obj) { return Number(getStyle(obj, "filter").match(/^alpha\(opacity=([\d.]+)\)$/)[1]) / 100; }; };
var setOpacity;
if (kernelId !== 0) { setOpacity = function (obj, value) { obj.style.opacity = String(value); }; }
else { setOpacity = function (obj, value) { obj.style.filter = "alpha(opacity=" + String(value * 100) + ")"; }; };
var linear = function (start, alter, curTime, dur) { return start + curTime / dur * alter; };
var easeIn = function (start, alter, curTime, dur) { return start + Math.pow(curTime / dur, 2) * alter; };
var easeOut = function (start, alter, curTime, dur) { var progress = curTime / dur; return start - (Math.pow(progress, 2) - 2 * progress) * alter; };
var easeInOut = function (start, alter, curTime, dur) { var progress = curTime / dur * 2; return (progress < 1 ? Math.pow(progress, 2) : -((--progress) * (progress - 2) - 1)) * alter / 2 + start; };
var go = function (u) { var url = u, l = arguments.length; if (l !== 1) { url += "?" + String(arguments[1][0]) + "=" + escape(String(arguments[1][1])); if (l !== 2) { for (var i = 2; i < l; i++) { url += "&" + String(arguments[i][0]) + "=" + escape(String(arguments[i][1])); }; }; }; location.href = url; };
var request = (function () { var req = new Array(); var ps = location.search; if (ps.length !== 0) { ps = ps.substr(1).split("&"); for (var i = ps.length - 1; ; i--) { var p = ps[i].split("="); req[p[0]] = unescape(p[1]); if (i === 0) { break; }; }; }; return req; })();
var addCookie = function (k, v, t) { var c = k + "=" + escape(v) + "; path=/"; if (t !== undefined) { var d = new Date(); d.setTime(d.getTime() + t); c += "; expires=" + d.toUTCString(); }; document.cookie = c; };
var isExistCookie = function (k) { var f; if (document.cookie !== "") { var os = document.cookie.split("; "); for (var i = os.length - 1; ; i--) { if (os[i].split("=")[0] === k) { f = true; break; }; if (i === 0) { f = false; break; }; }; } else { f = false; }; return f; };
var getCookie = function (k) { var v; if (document.cookie !== "") { var os = document.cookie.split("; "); for (var i = os.length - 1; ; i--) { var o = os[i].split("="); if (o[0] === k) { v = unescape(o[1]); break; }; if (i === 0) { break; }; }; }; return v; };
var delCookie = function (k) { if (isExistCookie(k) === true) { document.cookie = k + "=" + "; path=/; expires=" + new Date().toUTCString(); }; };
var requestPoolNumber = document.getElementsByTagName("script")[document.getElementsByTagName("script").length - 1].src.split("=")[1];
if (requestPoolNumber !== undefined && requestPoolNumber !== "" && isNaN(requestPoolNumber) === false) {
    var AJAX = (function () {
        var CONNECTIONFAILUREMAXNUM = 3; var GET = "get", POST = "post"; var GET_SETREQUESTHEADER_KEY = "If-Modified-Since", GET_SETREQUESTHEADER_VALUE = "0"; var POST_SETREQUESTHEADER_KEY = "Content-Type", POST_SETREQUESTHEADER_VALUE = "application/x-www-form-urlencoded";
        if (kernelId === 0 && navigator.userAgent.indexOf("MSIE 6.0") !== -1) { var xmlHttpRequestPool = (function () { var i = 0; var n = parseInt(requestPoolNumber); var xs = new Array(); do { xs.push(new ActiveXObject("Microsoft.XMLHTTP")); if (++i === n) { break; }; } while (true); i = 0; return { getXMLHttpRequest: function () { return xs[i]; }, nextPointer: function () { if (++i === n) { i = 0; }; } }; })(); }
        else { var xmlHttpRequestPool = (function () { var i = 0; var n = parseInt(requestPoolNumber); var xs = new Array(); do { xs.push(new XMLHttpRequest()); if (++i === n) { break; }; } while (true); i = 0; return { getXMLHttpRequest: function () { return xs[i]; }, nextPointer: function () { if (++i === n) { i = 0; }; } }; })(); };
        var doGetx = function (u, exec1, exec2, en) { var x = xmlHttpRequestPool.getXMLHttpRequest(); if (x.readyState === 0) { xmlHttpRequestPool.nextPointer(); x.open(GET, u, true); x.setRequestHeader(GET_SETREQUESTHEADER_KEY, GET_SETREQUESTHEADER_VALUE); request(x, true, function (x) { exec1(x); }, function (s) { exec2(s); }, arguments); x.send(null); } else { setTimeout(function () { doGetx(u, exec1, exec2, en); }, 100); }; };
        var doPostx = function (u, p, exec1, exec2, en) { var x = xmlHttpRequestPool.getXMLHttpRequest(); if (x.readyState === 0) { xmlHttpRequestPool.nextPointer(); x.open(POST, u, true); x.setRequestHeader(POST_SETREQUESTHEADER_KEY, POST_SETREQUESTHEADER_VALUE); request(x, false, function (x) { exec1(x); }, function (s) { exec2(s); }, arguments); x.send(p); } else { setTimeout(function () { doPostx(u, p, exec1, exec2, en); }, 100); }; };
        var request = function (x, type, exec1, exec2, as) { x.onreadystatechange = function () { if (x.readyState === 4) { if (x.status === 200) { exec1(x); x.abort(); } else { if ((x.status === 12029 || x.status === 0) && as[as.length - 1] < CONNECTIONFAILUREMAXNUM) { x.abort(); if (type === true) { doGetx(as[0], as[1], as[2], as[3] + 1); } else { doPostx(as[0], as[1], as[2], as[3], as[4] + 1); }; } else { exec2(x.status); x.abort(); }; }; }; }; };
        return { doGet: function (u, exec1, exec2) { doGetx(u, function (x) { exec1(x); }, function (s) { if (exec2 !== undefined) { exec2(s); }; }, 0); }, doPost: function (u, p, exec1, exec2) { doPostx(u, p, function (x) { exec1(x); }, function (s) { if (exec2 !== undefined) { exec2(s); }; }, 0); } };
    })();
    var doGet = function (url, exec1, exec2) { function func() { AJAX.doGet(url, exec1, function (s) { if (s === 12029 || s === 0) { setTimeout(function () { func(); }, 1000); } else { if (exec2 !== undefined) { exec2(s); }; }; }); }; func(); };
    var doPost = function (url, exec1, exec2) { var us = url.split("?"); function func() { AJAX.doPost(us[0], us[1] !== undefined ? us[1] : null, exec1, function (s) { if (s === 12029 || s === 0) { setTimeout(function () { func(); }, 1000); } else { if (exec2 !== undefined) { exec2(s); }; }; }); }; func(); };
    var doGets = function (url, exec1) { doGet(url, function (x) { if (x.responseText !== "") { exec1(x); } else { setTimeout(function () { doGets(url, exec1); }, 5000); }; }, function (s) { setTimeout(function () { doGets(url, exec1); }, 5000); }); };
    var doPosts = function (url, exec1) { doPost(url, function (x) { if (x.responseText !== "") { exec1(x); } else { setTimeout(function () { doPosts(url, exec1); }, 5000); }; }, function (s) { setTimeout(function () { doPosts(url, exec1); }, 5000); }); };
};
var XML;
if (kernelId !== 0) { XML = function (tag) { this.tag = function (tagName) { var o; for (var i = 0, j = tag.getElementsByTagName(tagName).length; i < j; i++) { if (tag.getElementsByTagName(tagName)[i].tagName === tagName) { o = new XML(tag.getElementsByTagName(tagName)[i]); break; }; }; return o; }; this.value = function () { return tag.textContent; }; this.toElement = function () { return tag; }; }; }
else { XML = function (tag) { this.tag = function (tagName) { var o; for (var i = 0, j = tag.getElementsByTagName(tagName).length; i < j; i++) { if (tag.getElementsByTagName(tagName)[i].tagName === tagName) { o = new XML(tag.getElementsByTagName(tagName)[i]); break; }; }; return o; }; this.value = function () { return tag.text; }; this.toElement = function () { return tag; }; }; };
var getRandom = function (minNumber, maxNumber) { return parseInt(Math.random() * (maxNumber - minNumber + 1) + minNumber); };
var maxLengthContent = function (content, maxLength) { return content.length <= maxLength ? content : content.substring(0, maxLength) + ".."; };
var addScript = function (url) { var script = document.createElement("script"); script.type = "text/javascript"; script.src = url; document.getElementsByTagName("head")[0].appendChild(script); };
String.prototype.trim = function() { return this.replace(/(?:^\s*|\s*$)/g, ""); };

Date.prototype.Format = function (fmt) {
    var o = {
        "M+": this.getMonth() + 1, // 月
        "d+": this.getDate(), // 日
        "H+": this.getHours(), // 时
        "m+": this.getMinutes(), // 分
        "s+": this.getSeconds() // 秒
        // "q+": Math.floor((this.getMonth() + 3) / 3) //季度
        // "S": this.getMilliseconds() //毫秒
    };
    if (/(y+)/.test(fmt)) { fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length)); };
    for (var k in o) {
        if (new RegExp("(" + k + ")").test(fmt)) {
            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
        };
    };
    return fmt;
};